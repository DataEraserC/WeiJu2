{"messages":[{"role":"user","content":"Hello ChatGPT, I require your assistance as a WeiJu2 Script Generator. I have provided a README file from WeiJu2's repository that outlines the hook functionality I need scripts for. Your task is to create WeiJu2 Scripts that align with the hook functionality described in the README. The scripts you create should only output hook code and should not include any explanations. You are only permitted to use lua and not any other programming language. However, you can include documentation within the scripts to help with understanding.\n**Please don't output the code in markdown format as it will directly output to a Lua text editor.**\n\n--- README\nWeiJu2 is a scriptable xposed module, it provides a new way to change the application behavior.  Powered by Lua and made with ♥\n\nFeatures\n- Lua scripting\n- Simple and intuitive hook API\n- Share your package with others by publish it at [WeiJu2-Scripts](https://github.com/ikws4/WeiJu2-Scripts)\n\n```lua\n-- You can import any java class\nlocal Toast = import(\"android.widget.Toast\")\nlocal Activity = import(\"android.app.Activity\")\nlocal Bundle = import(\"android.os.Bundle\")\nlocal StringBuilder = import(\"java.lang.StringBuilder\")\n\n-- Hook a method, need define the method signature (return type, method name, params type)\nhook {\n  class = Activity,\n  returns = void,\n  method = \"onCreate\",\n  params = {\n    Bundle\n  },\n  after = function(this, params, ret)\n    -- This will call the `StringBuilder(CharSequence seq)` constructor\n    -- to instantiate a StringBuilder object\n    local sb = StringBuilder(\"Hello, \")\n    sb:append(\"WeiJu2\")\n\n    Toast:makeText(this, sb:toString(), Toast.LENGTH_SHORT):show()\n    --              ^\n    -- Note: `this` is the Activity instance\n  end,\n}\n\n-- Hook a constructor, when hook constructor, you should omit the return type and method name\nlocal View = import(\"android.view.View\")\nlocal Context = import(\"android.content.Context\")\nlocal AttributeSet = import(\"android.util.AttributeSet\")\n\nhook {\n  class = View,\n  params = {\n    Context,\n    AttributeSet,\n    int\n  },\n  after = function(this, params, ret)\n\n  end,\n}\n```\n\n```lua\n-- With the `import` function you can bind any java class, and access all the fields and methods that defined\n-- in that class. No more `XposedHelper.setStaticObjectField(Build.class, \"DEVICE\", \"coral\")` much cleaner!\nlocal Build = import(\"android.os.Build\")\n\nBuild.DEVICE = \"coral\"\nBuild.PRODUCT = \"coral\"\nBuild.MODEL = \"Google Pixel 4XL\"\nBuild.BRAND = \"google\"\nBuild.MANUFACTURER = \"google\"\nBuild.VERSION.RELEASE = \"13\"\n```\n\n```lua\n-- use lua buitin require function to import other packages,\n-- the package path shoulbe be the author name followed by the script name\n-- these information are defined in the metadata\nrequire(\"ikws4.system_variable\").setup {\n  -- config goes here\n}\n```\n\n```lua\n--[=[\n@metadata\n  return {\n    name = \"my_custom_package\",\n    author = \"you\",\n    version = \"1.0.0\",\n    description = \"Describle your package functionality\",\n    example = [[\n      -- Provide an example here\n    ]]\n  }\n@end\n--]=]\n\nlocal config = {\n}\n\nlocal M = {}\n\nM.setup = function(opts)\n  config = table.extend(config, opts or {})\n\n  -- write hook here\nend\n\nreturn M\n```\n\n```lua\nhook {\n  class = String,\n  returns = char,\n  method = \"charAt\",\n  params = {\n    int\n  },\n  after = function(this, params, ret)\n    print(\"return value: \" .. ret)\n    -- make it always return 'a'\n    return string.byte(\"a\")\n  end\n}\n```\n\nAPI\n\n```lua\n--- Examples:\n---   local StringBuilder = import(\"java.lang.StringBuilder\")\n---   local my_string_builder = StringBuilder(\"hi\")\n---   print(my_string_builder:toString())\n---\n--- @param class_name string\n--- @return Class\nfunction import(class_name) end\n```\n\n```lua\n--- Examples:\n---   local Runnable = import(\"java.lang.Runnable\")\n---   local my_runnable = object(Runnable, {\n---     run = function(this)\n---\n---     end\n---   })\n---\n--- @param class Class\n--- @param proxy table<string, function>\n--- @return Class\nfunction object(class, proxy) end\n```\n\n```lua\n--- Exampels:\n---   local View = import(\"android.view.View\")\n---   local Context = import(\"android.content.Context\")\n---   local AttributeSet = import(\"android.util.AttributeSet\")\n---\n---   hook {\n---     class = View,\n---     params = {\n---       Context,\n---       AttributeSet,\n---       int\n---     },\n---     after = function(this, params, ret)\n---       -- Add your own logic after constructor is called\n---\n---     end\n---   }\n---\n---   local Canvas = import(\"android.graphics.Canvas\")\n---\n---   hook {\n---     class = View,\n---     returns = void,\n---     method = \"onDraw\",\n---     params = {\n---       Canvas\n---     },\n---     after = function(this, params, ret)\n---       local canvas = params[1]\n---       -- Using canvas to draw anything you want\n---\n---     end\n---   }\n---\n--- @param config table This table accepts the following keys\n---                     - class: (Class) The hook target.\n---                     - returns: (nil|Class) The method return type.\n---                     - method: (string) The method name.\n---                     - params: (nil|table) The method argument types, can be nil if there is no argument.\n---                     - before: (nil|function) Executed before the method is called.\n---                     - after: (nil|function) Executed after the method is called.\n---                     - replace: (nil|function) A simple version of `before`, use to rewrite the whole method.\n--- @return Unhook\nfunction hook(config) end\n```\n\nAuto imported common java types\nThese types are common used in scripts, therefore we auto imported them for you.\n\n```\nbyte short int long float double char boolean void String List\n```\n\n--- End of README\n\nNow write a hook to toast \"OnCreate\" when Activity was created."},{"role":"assistant","content":"local Toast = import(\"android.widget.Toast\")\nlocal Activity = import(\"android.app.Activity\")\nlocal Bundle = import(\"android.os.Bundle\")\n\nhook {\n  class = Activity,\n  returns = void,\n  method = \"onCreate\",\n  params = {\n    Bundle\n  },\n  after = function(this, params, ret)\n    Toast:makeText(this, \"OnCreate\", Toast.LENGTH_SHORT):show()\n  end,\n}"}]}
